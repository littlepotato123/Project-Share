{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sopan\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\Project-Share\\\\project-share\\\\src\\\\Components\\\\Posts\\\\Posts.js\";\nimport React, { useEffect, useState } from 'react';\nimport Commenting from './Comments';\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\nconst url = \"https://us-central1-project-share-8df06.cloudfunctions.net/api/\";\n\nconst Posts = props => {\n  const [showComment, setComments] = useState(false);\n  const [liked, setLiked] = useState(null);\n  const [likesButton, setButton] = useState( /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setLiked(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }\n  }, \"Like\"));\n  let comments = null;\n  let likes = parseInt(props.likes);\n\n  if (showComment) {\n    comments = /*#__PURE__*/React.createElement(Commenting, {\n      id: props.id,\n      token: props.token,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }\n    });\n  }\n\n  useEffect(() => {\n    if (liked == null) {\n      setButton( /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => setLiked(true),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }\n      }, \"Like\"));\n    }\n\n    if (liked == true) {\n      like();\n      setButton( /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => setLiked(false),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }\n      }, \"Unlike\"));\n    }\n\n    if (liked == false) {\n      unlike();\n      setButton( /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => setLiked(true),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }\n      }, \"Like\"));\n    }\n\n    if (sessionStorage.getItem(props.id)) {\n      setButton( /*#__PURE__*/React.createElement(\"button\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }\n      }, \"Hello\"));\n    }\n  }, [liked]);\n\n  const like = () => {\n    const post = {\n      body: props.children,\n      author: props.author,\n      title: props.title,\n      category: props.category,\n      likes,\n      id: props.id\n    };\n    likes = post.likes + 1;\n    fetch(proxyUrl + url + 'likePost', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"PostmanRuntime/7.26.5\",\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Connection\": \"keep-alive\"\n      },\n      body: JSON.stringify(post)\n    }).then(() => {\n      sessionStorage.setItem(props.id, 'true');\n    });\n  };\n\n  const unlike = () => {\n    const post = {\n      body: props.children,\n      author: props.author,\n      title: props.title,\n      category: props.category,\n      likes: parseInt(props.likes + 1) - 1,\n      id: props.id\n    };\n    likes = props.likes + 1 - 1;\n    fetch(proxyUrl + url + 'unlikePost', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"PostmanRuntime/7.26.5\",\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Connection\": \"keep-alive\"\n      },\n      body: JSON.stringify(post)\n    }).then(() => {\n      sessionStorage.removeItem(props.id);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    key: props.id,\n    className: \"post-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"post-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, props.title), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"post-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, \"Category: \", /*#__PURE__*/React.createElement(\"a\", {\n    href: `http://localhost:3000/category/${props.category}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 52\n    }\n  }, props.category)), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"post-author\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, \"Author: \", /*#__PURE__*/React.createElement(\"a\", {\n    href: `http://localhost:3000/user/${props.author}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 48\n    }\n  }, props.author)), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"post-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, props.children), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"post-likes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, likesButton, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 52\n    }\n  }, likes)), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"post-comment-button\",\n    onClick: () => setComments(!showComment),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, \"Comments\"), comments);\n};\n\nexport default Posts;","map":{"version":3,"sources":["C:/Users/sopan/OneDrive/Documents/Personal Projects/Project-Share/project-share/src/Components/Posts/Posts.js"],"names":["React","useEffect","useState","Commenting","proxyUrl","url","Posts","props","showComment","setComments","liked","setLiked","likesButton","setButton","comments","likes","parseInt","id","token","like","unlike","sessionStorage","getItem","post","body","children","author","title","category","fetch","method","headers","JSON","stringify","then","setItem","removeItem"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Commenting from './Comments';\r\n\r\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst url = \"https://us-central1-project-share-8df06.cloudfunctions.net/api/\";\r\nconst Posts = (props) => {\r\n    const [showComment, setComments] = useState(false);\r\n    const [liked, setLiked] = useState(null);\r\n    const [likesButton, setButton] = useState((\r\n        <button onClick={() => setLiked(true)}>Like</button>\r\n    ));\r\n\r\n\r\n    let comments = null;\r\n\r\n    let likes = parseInt(props.likes)\r\n\r\n    if (showComment) {\r\n        comments = (\r\n            <Commenting id={props.id} token={props.token} />\r\n        )\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (liked == null) {\r\n            setButton((\r\n                <button onClick={() => setLiked(true)}>Like</button>\r\n            ));\r\n        }\r\n        if (liked == true) {\r\n            like();\r\n            setButton((\r\n                <button onClick={() => setLiked(false)}>Unlike</button>\r\n            ))\r\n        }\r\n        if (liked == false) {\r\n            unlike();\r\n            setButton((\r\n                <button onClick={() => setLiked(true)}>Like</button>\r\n            ));\r\n        }\r\n        if(sessionStorage.getItem(props.id)) {\r\n            setButton((\r\n                <button>Hello</button> \r\n            ))\r\n        }\r\n    }, [liked])\r\n\r\n    const like = () => {\r\n        const post = {\r\n            body: props.children,\r\n            author: props.author,\r\n            title: props.title,\r\n            category: props.category,\r\n            likes,\r\n            id: props.id\r\n        };\r\n\r\n        likes = post.likes + 1;\r\n\r\n        fetch(proxyUrl + url + 'likePost', {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"User-Agent\": \"PostmanRuntime/7.26.5\",\r\n                \"Accept\": \"*/*\",\r\n                \"Accept-Encoding\": \"gzip, deflate, br\",\r\n                \"Connection\": \"keep-alive\"\r\n            },\r\n            body: JSON.stringify(post)\r\n        })\r\n        .then(() => {\r\n            sessionStorage.setItem(props.id, 'true');\r\n        })\r\n    }\r\n\r\n\r\n    const unlike = () => {\r\n        const post = {\r\n            body: props.children,\r\n            author: props.author,\r\n            title: props.title,\r\n            category: props.category,\r\n            likes: parseInt(props.likes + 1) - 1,\r\n            id: props.id\r\n        };\r\n\r\n        likes = props.likes + 1 - 1;\r\n\r\n        fetch(proxyUrl + url + 'unlikePost', {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"User-Agent\": \"PostmanRuntime/7.26.5\",\r\n                \"Accept\": \"*/*\",\r\n                \"Accept-Encoding\": \"gzip, deflate, br\",\r\n                \"Connection\": \"keep-alive\"\r\n            },\r\n            body: JSON.stringify(post)\r\n        })\r\n        .then(() => {\r\n            sessionStorage.removeItem(props.id);\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div key={props.id} className=\"post-content\">\r\n            <p className=\"post-title\">{props.title}</p>\r\n            <p className=\"post-category\">Category: <a href={`http://localhost:3000/category/${props.category}`}>{props.category}</a></p>\r\n            <p className=\"post-author\">Author: <a href={`http://localhost:3000/user/${props.author}`}>{props.author}</a></p>\r\n            <p className=\"post-body\">{props.children}</p>\r\n            <p className=\"post-likes\">{likesButton}<span>{likes}</span></p>\r\n            <button className=\"post-comment-button\" onClick={() => setComments(!showComment)}>Comments</button>\r\n            { comments}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Posts;"]},"metadata":{},"sourceType":"module"}