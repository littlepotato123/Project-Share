{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sopan\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\Project-Share\\\\web\\\\src\\\\Components\\\\Posts\\\\Posts.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Fetch } from '../../Tools';\nimport Input from './Input';\nimport List from './List';\n\nconst Posts = props => {\n  const [comments, setComments] = useState(false);\n  const [c, setC] = useState(null);\n  const [liked, setLiked] = useState(null);\n  const [likes, setLikes] = useState(props.likes);\n  const [display, setDisplay] = useState(null);\n  const [likesButton, setButton] = useState( /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setLiked(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, \"Like\"));\n  useEffect(() => {\n    const scoped = async () => {\n      const res = await Fetch(`\n                {\n                    getComments(id: \"${props.postId}\") {\n                        id\n                        body\n                        author\n                    }\n                }\n            `);\n\n      if (res) {\n        setC(res.getComments);\n      }\n    };\n\n    scoped();\n\n    if (liked == null) {\n      setButton( /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => setLiked(true),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 17\n        }\n      }, \"Like\"));\n    }\n\n    if (liked == true) {\n      like();\n      setButton( /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => setLiked(false),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }\n      }, \"Unlike\"));\n    }\n\n    if (liked == false) {\n      unlike();\n      setButton( /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => setLiked(true),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }\n      }, \"Like\"));\n    }\n\n    if (sessionStorage.getItem(props.postId)) {\n      setButton( /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => setLiked(false),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }\n      }, \"Unlike\"));\n    }\n\n    if (comments) {\n      setDisplay( /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }\n      }, c ? c.map(ca => /*#__PURE__*/React.createElement(List, {\n        author: ca.author,\n        body: ca.body,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 41\n        }\n      })) : /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 87\n        }\n      }, \"Loading...\"), sessionStorage.getItem('token') ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        id: props.postId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 29\n        }\n      })) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        disabled: \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        disabled: \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 29\n        }\n      }, \"Comment\"))));\n    } else {\n      setDisplay(null);\n    }\n  }, [liked, comments]);\n\n  const like = () => {\n    const scoped = async () => {\n      const res = await Fetch(`\n                mutation {\n                    likePost(id:\"${props.postId}\", current_like: ${likes})\n                } \n            `);\n      setLikes(res.likePost);\n      sessionStorage.setItem(props.postId, 'true');\n    };\n\n    scoped();\n  };\n\n  const unlike = () => {\n    const scoped = async () => {\n      const res = await Fetch(`\n                mutation {\n                    unlikePost(id: \"${props.postId}\", current_like: ${likes})\n                }\n            `);\n      setLikes(res.unlikePost);\n      sessionStorage.removeItem(props.postId);\n    };\n\n    scoped();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    key: props.postId,\n    className: \"post-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"post-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, props.title), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"post-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, \"Category: \", /*#__PURE__*/React.createElement(\"a\", {\n    href: `http://localhost:3000/category/${props.category}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 52\n    }\n  }, props.category)), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"post-author\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, \"Author: \", /*#__PURE__*/React.createElement(\"a\", {\n    href: `http://localhost:3000/user/${props.author}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 48\n    }\n  }, props.author)), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"post-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, props.children), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"post-likes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, likesButton, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 52\n    }\n  }, likes)), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"post-comment-button\",\n    onClick: () => setComments(!comments),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, \"Comments\"), display);\n};\n\nexport default Posts;","map":{"version":3,"sources":["C:/Users/sopan/OneDrive/Documents/Personal Projects/Project-Share/web/src/Components/Posts/Posts.js"],"names":["React","useEffect","useState","Fetch","Input","List","Posts","props","comments","setComments","c","setC","liked","setLiked","likes","setLikes","display","setDisplay","likesButton","setButton","scoped","res","postId","getComments","like","unlike","sessionStorage","getItem","map","ca","author","body","likePost","setItem","unlikePost","removeItem","title","category","children"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Fetch } from '../../Tools';\r\nimport Input from './Input';\r\nimport List from './List';\r\n\r\nconst Posts = (props) => {\r\n    const [comments, setComments] = useState(false);\r\n    const [c, setC] = useState(null);\r\n    const [liked, setLiked] = useState(null);\r\n    const [likes, setLikes] = useState(props.likes);\r\n    const [display, setDisplay] = useState(null);\r\n    const [likesButton, setButton] = useState((\r\n        <button onClick={() => setLiked(true)}>Like</button>\r\n    ));\r\n\r\n    useEffect(() => {\r\n        const scoped = async () => {\r\n            const res = await Fetch(`\r\n                {\r\n                    getComments(id: \"${props.postId}\") {\r\n                        id\r\n                        body\r\n                        author\r\n                    }\r\n                }\r\n            `);\r\n            if(res) {\r\n                setC(res.getComments);\r\n            }\r\n        }\r\n\r\n        scoped();\r\n\r\n        if (liked == null) {\r\n            setButton((\r\n                <button onClick={() => setLiked(true)}>Like</button>\r\n            ));\r\n        }\r\n        if (liked == true) {\r\n            like();\r\n            setButton((\r\n                <button onClick={() => setLiked(false)}>Unlike</button>\r\n            ))\r\n        }\r\n        if (liked == false) {\r\n            unlike();\r\n            setButton((\r\n                <button onClick={() => setLiked(true)}>Like</button>\r\n            ));\r\n        }\r\n        if(sessionStorage.getItem(props.postId)) {\r\n            setButton((\r\n                <button onClick={() => setLiked(false)}>Unlike</button>\r\n            ))\r\n        }\r\n        if(comments) {\r\n            setDisplay((\r\n                <div>\r\n                    {\r\n                        c ? c.map(ca => <List author={ca.author} body={ca.body} />) : <p>Loading...</p>\r\n                    }\r\n                    {\r\n                        sessionStorage.getItem('token') ? \r\n                        <div>\r\n                            <Input id={props.postId} />\r\n                        </div> : \r\n                        <div>\r\n                            <input disabled=\"true\" />\r\n                            <button disabled=\"true\">Comment</button>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            ))\r\n        } else {\r\n            setDisplay(null);\r\n        }\r\n    }, [liked, comments])\r\n\r\n    const like = () => {\r\n        const scoped = async () => {\r\n            const res = await Fetch(`\r\n                mutation {\r\n                    likePost(id:\"${props.postId}\", current_like: ${likes})\r\n                } \r\n            `);\r\n            setLikes(res.likePost);\r\n            sessionStorage.setItem(props.postId, 'true');\r\n        };\r\n\r\n        scoped();\r\n    }\r\n\r\n    const unlike = () => {\r\n        const scoped = async () => {\r\n            const res = await Fetch(`\r\n                mutation {\r\n                    unlikePost(id: \"${props.postId}\", current_like: ${likes})\r\n                }\r\n            `);\r\n            setLikes(res.unlikePost);\r\n            sessionStorage.removeItem(props.postId);\r\n        }\r\n\r\n        scoped();\r\n    }\r\n\r\n    return (\r\n        <div key={props.postId} className=\"post-content\">\r\n            <p className=\"post-title\">{props.title}</p>\r\n            <p className=\"post-category\">Category: <a href={`http://localhost:3000/category/${props.category}`}>{props.category}</a></p>\r\n            <p className=\"post-author\">Author: <a href={`http://localhost:3000/user/${props.author}`}>{props.author}</a></p>\r\n            <p className=\"post-body\">{props.children}</p>\r\n            <p className=\"post-likes\">{likesButton}<span>{likes}</span></p>\r\n            <button className=\"post-comment-button\" onClick={() => setComments(!comments)}>Comments</button>\r\n            { display }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Posts;"]},"metadata":{},"sourceType":"module"}