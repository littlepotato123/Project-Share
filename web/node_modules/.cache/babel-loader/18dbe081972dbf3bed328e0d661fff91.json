{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sopan\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\Project-Share\\\\web\\\\src\\\\Pages\\\\User Page\\\\User.js\";\nimport React, { useEffect, useState } from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { useHistory, useParams } from 'react-router-dom';\nimport Loading from '../../Components/Loading/Loading';\nimport Post from '../../Components/Posts/Posts';\n\nconst User = () => {\n  const [user, setUser] = useState({});\n  const [supporters, setSupporters] = useState(null);\n  const [posts, setPosts] = useState(null);\n  let [share, setShare] = useState(null);\n  const [supported, setSupported] = useState(false);\n\n  const unsupport = () => {\n    setSupported(!supported); // fetch(proxyUrl + url + 'unfollowUser', {\n    //     method: 'POST',\n    //     headers: {\n    //         \"Content-Type\": \"application/json\",\n    //         \"User-Agent\": \"PostmanRuntime/7.26.5\",\n    //         \"Accept\": \"*/*\",\n    //         \"Accept-Encoding\": \"gzip, deflate, br\",\n    //         \"Connection\": \"keep-alive\"\n    //     },\n    //     body: JSON.stringify({\n    //         supporters: supporters,\n    //         handle: user.handle,\n    //         email: user.email,\n    //         userId: user.userId,\n    //         id: user.userId\n    //     })\n    // })\n    // .then(() => {\n    //     setSupporters(supporters - 1);\n    // })\n  };\n\n  const support = () => {\n    setSupported(!supported); // fetch(proxyUrl + url + 'followUser', {\n    //     method: 'POST',\n    //     headers: {\n    //         \"Content-Type\": \"application/json\",\n    //         \"User-Agent\": \"PostmanRuntime/7.26.5\",\n    //         \"Accept\": \"*/*\",\n    //         \"Accept-Encoding\": \"gzip, deflate, br\",\n    //         \"Connection\": \"keep-alive\"\n    //     },\n    //     body: JSON.stringify({\n    //         supporters: supporters,\n    //         handle: user.handle,\n    //         email: user.email,\n    //         userId: user.userId,\n    //         id: user.userId\n    //     })\n    // })\n    // .then(() => {\n    //     setSupporters(supporters + 1);\n    // })\n  };\n\n  let supportButton = /*#__PURE__*/React.createElement(\"button\", {\n    onClick: support,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, \"Support\");\n  const {\n    userHandle\n  } = useParams();\n  const history = useHistory();\n\n  if (supported) {\n    supportButton = /*#__PURE__*/React.createElement(\"button\", {\n      onClick: unsupport,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }, \"Unsupport\");\n  } else {\n    supportButton = /*#__PURE__*/React.createElement(\"button\", {\n      onClick: support,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, \"Support\");\n  }\n\n  useEffect(() => {// fetch(proxyUrl + url + 'getUser', {\n    //     method: 'POST',\n    //     headers: {\n    //         \"Content-Type\": \"application/json\",\n    //         \"User-Agent\": \"PostmanRuntime/7.26.5\",\n    //         \"Accept\": \"*/*\",\n    //         \"Accept-Encoding\": \"gzip, deflate, br\",\n    //         \"Connection\": \"keep-alive\"\n    //     },\n    //     body: JSON.stringify({\n    //         userHandle: userHandle\n    //     })\n    // })\n    // .then(res => res.json())\n    // .then(data => {\n    //     if(typeof data == 'object') {\n    //         if(Object.keys(data).length === 0) {\n    //             history.push('/wronguser');\n    //         } else {\n    //             setUser(data.user);\n    //             setShare(`localhost:3000/user/${data.user.handle}`)\n    //             setSupporters(data.user.supporters);\n    //         }\n    //     }\n    // })\n  }, []);\n\n  const loadPost = () => {\n    fetch(proxyUrl + url + 'getUserPost', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"PostmanRuntime/7.26.5\",\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Connection\": \"keep-alive\"\n      },\n      body: JSON.stringify({\n        user: user.handle\n      })\n    }).then(res => res.json()).then(data => setPosts(data));\n  };\n\n  let userInfo = /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, user.handle, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 27\n    }\n  }), supporters, \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 26\n    }\n  }), supportButton, /*#__PURE__*/React.createElement(CopyToClipboard, {\n    text: share,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, \"Copy Share Link\")), user.bio, /*#__PURE__*/React.createElement(\"img\", {\n    width: \"1000px\",\n    src: user.url ? user.url : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: loadPost,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, \"Load Posts\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, posts ? posts.map(post => /*#__PURE__*/React.createElement(Post, {\n    title: post.title,\n    author: post.author,\n    category: post.category,\n    likes: post.likes,\n    id: post.postId,\n    createdAt: post.createdAt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 25\n    }\n  }, post.body)) : null));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, Object.keys(user).length === 0 ? /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 48\n    }\n  }) : userInfo);\n};\n\nexport default User;","map":{"version":3,"sources":["C:/Users/sopan/OneDrive/Documents/Personal Projects/Project-Share/web/src/Pages/User Page/User.js"],"names":["React","useEffect","useState","CopyToClipboard","useHistory","useParams","Loading","Post","User","user","setUser","supporters","setSupporters","posts","setPosts","share","setShare","supported","setSupported","unsupport","support","supportButton","userHandle","history","loadPost","fetch","proxyUrl","url","method","headers","body","JSON","stringify","handle","then","res","json","data","userInfo","bio","map","post","title","author","category","likes","postId","createdAt","Object","keys","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport {\r\n    useHistory,\r\n    useParams\r\n} from 'react-router-dom';\r\nimport Loading from '../../Components/Loading/Loading';\r\nimport Post from '../../Components/Posts/Posts';\r\n\r\nconst User = () => {\r\n    const [user, setUser] = useState({});\r\n    const [supporters, setSupporters] = useState(null);\r\n    const [posts, setPosts] = useState(null);\r\n    let [share, setShare] = useState(null);\r\n\r\n    const [supported, setSupported] = useState(false);\r\n\r\n    const unsupport = () => {\r\n        setSupported(!supported);\r\n        // fetch(proxyUrl + url + 'unfollowUser', {\r\n        //     method: 'POST',\r\n        //     headers: {\r\n        //         \"Content-Type\": \"application/json\",\r\n        //         \"User-Agent\": \"PostmanRuntime/7.26.5\",\r\n        //         \"Accept\": \"*/*\",\r\n        //         \"Accept-Encoding\": \"gzip, deflate, br\",\r\n        //         \"Connection\": \"keep-alive\"\r\n        //     },\r\n        //     body: JSON.stringify({\r\n        //         supporters: supporters,\r\n        //         handle: user.handle,\r\n        //         email: user.email,\r\n        //         userId: user.userId,\r\n        //         id: user.userId\r\n        //     })\r\n        // })\r\n        // .then(() => {\r\n        //     setSupporters(supporters - 1);\r\n        // })\r\n    }\r\n\r\n    const support = () => {\r\n        setSupported(!supported);\r\n        // fetch(proxyUrl + url + 'followUser', {\r\n        //     method: 'POST',\r\n        //     headers: {\r\n        //         \"Content-Type\": \"application/json\",\r\n        //         \"User-Agent\": \"PostmanRuntime/7.26.5\",\r\n        //         \"Accept\": \"*/*\",\r\n        //         \"Accept-Encoding\": \"gzip, deflate, br\",\r\n        //         \"Connection\": \"keep-alive\"\r\n        //     },\r\n        //     body: JSON.stringify({\r\n        //         supporters: supporters,\r\n        //         handle: user.handle,\r\n        //         email: user.email,\r\n        //         userId: user.userId,\r\n        //         id: user.userId\r\n        //     })\r\n        // })\r\n        // .then(() => {\r\n        //     setSupporters(supporters + 1);\r\n        // })\r\n    }\r\n\r\n    let supportButton = (\r\n        <button onClick={support}>Support</button>\r\n    )\r\n\r\n    const { userHandle } = useParams();\r\n    \r\n    const history = useHistory();\r\n\r\n    if(supported) {\r\n        supportButton = (\r\n            <button onClick={unsupport}>Unsupport</button>\r\n        );\r\n    } else {\r\n        supportButton = (\r\n            <button onClick={support}>Support</button>\r\n        )\r\n    }\r\n\r\n    useEffect(() => {\r\n        // fetch(proxyUrl + url + 'getUser', {\r\n        //     method: 'POST',\r\n        //     headers: {\r\n        //         \"Content-Type\": \"application/json\",\r\n        //         \"User-Agent\": \"PostmanRuntime/7.26.5\",\r\n        //         \"Accept\": \"*/*\",\r\n        //         \"Accept-Encoding\": \"gzip, deflate, br\",\r\n        //         \"Connection\": \"keep-alive\"\r\n        //     },\r\n        //     body: JSON.stringify({\r\n        //         userHandle: userHandle\r\n        //     })\r\n        // })\r\n        // .then(res => res.json())\r\n        // .then(data => {\r\n        //     if(typeof data == 'object') {\r\n        //         if(Object.keys(data).length === 0) {\r\n        //             history.push('/wronguser');\r\n        //         } else {\r\n        //             setUser(data.user);\r\n        //             setShare(`localhost:3000/user/${data.user.handle}`)\r\n        //             setSupporters(data.user.supporters);\r\n        //         }\r\n        //     }\r\n        // })\r\n    }, [])\r\n\r\n    const loadPost = () => {\r\n        fetch(proxyUrl + url + 'getUserPost', {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"User-Agent\": \"PostmanRuntime/7.26.5\",\r\n                \"Accept\": \"*/*\",\r\n                \"Accept-Encoding\": \"gzip, deflate, br\",\r\n                \"Connection\": \"keep-alive\"\r\n            },\r\n            body: JSON.stringify({ user: user.handle })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => setPosts(data))\r\n    }\r\n\r\n    let userInfo = (\r\n        <div>\r\n            {user.handle} <br />\r\n            {supporters} <br />\r\n            { supportButton }\r\n            <CopyToClipboard text={share}>\r\n                <button>Copy Share Link</button>\r\n            </CopyToClipboard>\r\n            {user.bio}\r\n            <img width=\"1000px\" src={user.url ? user.url : null} />\r\n            <button onClick={loadPost}>Load Posts</button>\r\n            <div>\r\n                {\r\n                    posts ? \r\n                    posts.map(post => \r\n                        <Post\r\n                            title={post.title} \r\n                            author={post.author} \r\n                            category={post.category}\r\n                            likes={post.likes}\r\n                            id={post.postId}\r\n                            createdAt={post.createdAt}\r\n                        >\r\n                            {post.body}\r\n                        </Post>\r\n                    ) :\r\n                    null\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            { Object.keys(user).length === 0 ? <Loading /> : userInfo}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;"]},"metadata":{},"sourceType":"module"}