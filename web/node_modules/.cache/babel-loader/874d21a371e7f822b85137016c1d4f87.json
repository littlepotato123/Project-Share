{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sopan\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\Project-Share\\\\project-share\\\\src\\\\Components\\\\Posts\\\\Comments.js\";\nimport React, { useEffect, useState } from 'react';\nimport CommentComponent from './Commenting';\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\nconst url = \"https://us-central1-project-share-8df06.cloudfunctions.net/api/\";\n\nconst Commenting = props => {\n  const [postData, setPost] = useState({\n    id: props.id\n  });\n  const [comments, setComments] = useState(null);\n  const [comment, setComment] = useState('');\n  const [postList, setPostList] = useState([]);\n  const idToken = sessionStorage.getItem('token');\n  let loadButton = null;\n\n  const loadAll = () => {\n    setPostList(comments);\n  };\n\n  const loadMore = () => {\n    if (comments !== null) {\n      if (comments.length > 3) {\n        n = comments.length / 3;\n\n        if (n > 2) {\n          loadButton = /*#__PURE__*/React.createElement(\"button\", {\n            onClick: loadMore,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 25\n            }\n          }, \"Load All\");\n        } else {\n          setPostList(comments.splice(0, comments.length));\n        }\n      } else {\n        alert(\"No More Comments\");\n      }\n    } else {\n      alert(\"There are no more comments\");\n    }\n  };\n\n  useEffect(() => {\n    fetch(proxyUrl + url + 'getComment', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"PostmanRuntime/7.26.5\",\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Connection\": \"keep-alive\"\n      },\n      body: JSON.stringify(postData)\n    }).then(res => res.json()).then(data => {\n      setComments(data);\n      setPostList(data.splice(0, 3));\n\n      if (data.length > 3) {\n        loadButton = /*#__PURE__*/React.createElement(\"button\", {\n          onClick: loadMore,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 21\n          }\n        }, \"Load More Comments\");\n      }\n    });\n  }, []);\n\n  const post = () => {\n    if (idToken == null | undefined) {\n      alert('Not Logged In');\n    }\n\n    fetch(proxyUrl + url + '/createComment', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"PostmanRuntime/7.26.5\",\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Connection\": \"keep-alive\",\n        \"Authorization\": `Bearer ${idToken}`\n      },\n      body: JSON.stringify({\n        id: props.id,\n        body: comment\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.error === \"Unauthorized\") {\n        alert(\"You must be logged in to submit commit\");\n      }\n    }).then(() => {\n      setComment('');\n      window.location.reload(false);\n    }).catch(err => console.log(err));\n  };\n\n  const handleChange = e => {\n    if (e.key == \"Enter\") {\n      post();\n    }\n  };\n\n  let posting = /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: comment,\n    onChange: e => setComment(e.target.value),\n    onKeyPress: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, \"Comment\"));\n\n  if (comments == null) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, posting);\n  } else if (comments.error === \"Could not find post\") {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, \"Could not find any comments, Be the first to comment!\"), posting);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, postList.map(c => /*#__PURE__*/React.createElement(CommentComponent, {\n    author: c.author,\n    body: c.body,\n    id: c.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 35\n    }\n  })), posting);\n};\n\nexport default Commenting;","map":{"version":3,"sources":["C:/Users/sopan/OneDrive/Documents/Personal Projects/Project-Share/project-share/src/Components/Posts/Comments.js"],"names":["React","useEffect","useState","CommentComponent","proxyUrl","url","Commenting","props","postData","setPost","id","comments","setComments","comment","setComment","postList","setPostList","idToken","sessionStorage","getItem","loadButton","loadAll","loadMore","length","n","splice","alert","fetch","method","headers","body","JSON","stringify","then","res","json","data","post","undefined","error","window","location","reload","catch","err","console","log","handleChange","e","key","posting","target","value","map","c","author"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport CommentComponent from './Commenting';\r\n\r\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst url = \"https://us-central1-project-share-8df06.cloudfunctions.net/api/\";\r\n\r\nconst Commenting = (props) => {\r\n    const [postData, setPost] = useState({\r\n        id: props.id,\r\n    })\r\n    const [comments, setComments] = useState(null);\r\n    const [comment, setComment] = useState('');\r\n    const [postList, setPostList] = useState([]);\r\n\r\n    const idToken = sessionStorage.getItem('token');\r\n\r\n    let loadButton = null;\r\n\r\n    const loadAll = () => {\r\n        setPostList(comments);\r\n    }\r\n\r\n    const loadMore = () => {\r\n        if(comments !== null) {\r\n            if(comments.length > 3) {\r\n                n = comments.length / 3;\r\n                if(n > 2) {\r\n                    loadButton = (\r\n                        <button onClick={loadMore}>Load All</button>\r\n                    ) \r\n                } else {\r\n                    setPostList(comments.splice(0, comments.length))\r\n                }\r\n            } else {\r\n                alert(\"No More Comments\");\r\n            }\r\n        } else {\r\n            alert(\"There are no more comments\")\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetch(proxyUrl + url + 'getComment', {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"User-Agent\": \"PostmanRuntime/7.26.5\",\r\n                \"Accept\": \"*/*\",\r\n                \"Accept-Encoding\": \"gzip, deflate, br\",\r\n                \"Connection\": \"keep-alive\"\r\n            },\r\n            body: JSON.stringify(postData)\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setComments(data);\r\n            setPostList(data.splice(0, 3));\r\n            if(data.length > 3) {\r\n                loadButton = (\r\n                    <button onClick={loadMore}>Load More Comments</button>\r\n                )\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    const post = () => {\r\n        if(idToken == null | undefined) {\r\n            alert('Not Logged In')\r\n        }\r\n\r\n        fetch(proxyUrl + url + '/createComment', {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"User-Agent\": \"PostmanRuntime/7.26.5\",\r\n                \"Accept\": \"*/*\",\r\n                \"Accept-Encoding\": \"gzip, deflate, br\",\r\n                \"Connection\": \"keep-alive\",\r\n                \"Authorization\": `Bearer ${idToken}`\r\n            },\r\n            body: JSON.stringify({\r\n                id: props.id,\r\n                body: comment\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if(data.error === \"Unauthorized\") {\r\n                alert(\"You must be logged in to submit commit\");\r\n            }\r\n        })\r\n        .then(() => {\r\n            setComment('');\r\n            window.location.reload(false);\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        if(e.key == \"Enter\") {\r\n            post();\r\n        }\r\n    }\r\n\r\n    let posting = (\r\n        <div>\r\n            <input \r\n                value={comment}\r\n                onChange={e => setComment(e.target.value)}\r\n                onKeyPress={handleChange}\r\n            />\r\n            <button onClick={post}>Comment</button>\r\n        </div>\r\n    )\r\n\r\n    if(comments == null) {\r\n        return (\r\n            <div>\r\n                { posting }\r\n            </div>\r\n        )\r\n    } else if(comments.error === \"Could not find post\") {\r\n        return (\r\n            <div>\r\n                <h1>Could not find any comments, Be the first to comment!</h1>\r\n                { posting }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                postList.map(c => <CommentComponent author={c.author} body={c.body} id={c.id} />)\r\n            }\r\n            { posting }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Commenting;"]},"metadata":{},"sourceType":"module"}