{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sopan\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\Project-Share\\\\project-share\\\\src\\\\Components\\\\Posts\\\\Comments.js\";\nimport React, { useEffect, useState } from 'react';\nimport Loading from '../Loading/Loading';\nimport CommentComponent from './Commenting';\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\nconst url = \"https://us-central1-project-share-8df06.cloudfunctions.net/api/\";\n\nconst Commenting = props => {\n  const [postData, setPost] = useState({\n    id: props.id\n  });\n  const [comments, setComments] = useState(null);\n  const [comment, setComment] = useState('');\n  const [handle, setHandle] = useState('');\n  const idToken = sessionStorage.getItem('token');\n  useEffect(() => {\n    fetch(proxyUrl + url + 'getComment', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"PostmanRuntime/7.26.5\",\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Connection\": \"keep-alive\"\n      },\n      body: JSON.stringify(postData)\n    }).then(res => res.json()).then(data => {\n      setComments(data);\n    });\n  }, []);\n\n  const post = () => {\n    fetch(proxyUrl + url + '/createComment', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"PostmanRuntime/7.26.5\",\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Connection\": \"keep-alive\",\n        \"Authorization\": `Bearer ${idToken}`\n      },\n      body: JSON.stringify({\n        id: props.id,\n        body: comment\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.error === \"Unauthorized\") {\n        alert(\"You must be logged in to submit commit\");\n      }\n    }).then(() => {\n      setComment('');\n    }).then(() => {\n      fetch(proxyUrl + url + 'getHandle', {\n        method: 'POST',\n        headers: {\n          \"Authorization\": `Bearer ${idToken}`\n        }\n      }).then(res => res.json()).then(data => {\n        console.log(data.handle);\n      });\n    }).catch(err => console.log(err));\n  };\n\n  const handleChange = e => {\n    if (e.key == \"Enter\") {\n      post();\n    }\n  };\n\n  let posting = /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: comment,\n    onChange: e => setComment(e.target.value),\n    onKeyPress: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, \"Comment\"));\n\n  if (comments == null) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, posting);\n  } else if (comments.error === \"Could not find post\") {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, \"Could not find any comments, Be the first to comment!\"), posting);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, comments.map(c => /*#__PURE__*/React.createElement(CommentComponent, {\n    author: c.author,\n    body: c.body,\n    id: c.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 35\n    }\n  })), posting);\n};\n\nexport default Commenting;","map":{"version":3,"sources":["C:/Users/sopan/OneDrive/Documents/Personal Projects/Project-Share/project-share/src/Components/Posts/Comments.js"],"names":["React","useEffect","useState","Loading","CommentComponent","proxyUrl","url","Commenting","props","postData","setPost","id","comments","setComments","comment","setComment","handle","setHandle","idToken","sessionStorage","getItem","fetch","method","headers","body","JSON","stringify","then","res","json","data","post","error","alert","console","log","catch","err","handleChange","e","key","posting","target","value","map","c","author"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,gBAAP,MAA6B,cAA7B;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;AACA,MAAMC,GAAG,GAAG,iEAAZ;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC1B,QAAM,CAACC,QAAD,EAAWC,OAAX,IAAsBR,QAAQ,CAAC;AACjCS,IAAAA,EAAE,EAAEH,KAAK,CAACG;AADuB,GAAD,CAApC;AAGA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAMgB,OAAO,GAAGC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAhB;AAEAnB,EAAAA,SAAS,CAAC,MAAM;AACZoB,IAAAA,KAAK,CAAChB,QAAQ,GAAGC,GAAX,GAAiB,YAAlB,EAAgC;AACjCgB,MAAAA,MAAM,EAAE,MADyB;AAEjCC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,sBAAc,uBAFT;AAGL,kBAAU,KAHL;AAIL,2BAAmB,mBAJd;AAKL,sBAAc;AALT,OAFwB;AASjCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAejB,QAAf;AAT2B,KAAhC,CAAL,CAWCkB,IAXD,CAWMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAXb,EAYCF,IAZD,CAYMG,IAAI,IAAI;AACVjB,MAAAA,WAAW,CAACiB,IAAD,CAAX;AACH,KAdD;AAeH,GAhBQ,EAgBN,EAhBM,CAAT;;AAkBA,QAAMC,IAAI,GAAG,MAAM;AACfV,IAAAA,KAAK,CAAChB,QAAQ,GAAGC,GAAX,GAAiB,gBAAlB,EAAoC;AACrCgB,MAAAA,MAAM,EAAE,MAD6B;AAErCC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,sBAAc,uBAFT;AAGL,kBAAU,KAHL;AAIL,2BAAmB,mBAJd;AAKL,sBAAc,YALT;AAML,yBAAkB,UAASL,OAAQ;AAN9B,OAF4B;AAUrCM,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBf,QAAAA,EAAE,EAAEH,KAAK,CAACG,EADO;AAEjBa,QAAAA,IAAI,EAAEV;AAFW,OAAf;AAV+B,KAApC,CAAL,CAeCa,IAfD,CAeMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAfb,EAgBCF,IAhBD,CAgBMG,IAAI,IAAI;AACV,UAAGA,IAAI,CAACE,KAAL,KAAe,cAAlB,EAAkC;AAC9BC,QAAAA,KAAK,CAAC,wCAAD,CAAL;AACH;AACJ,KApBD,EAqBCN,IArBD,CAqBM,MAAM;AACRZ,MAAAA,UAAU,CAAC,EAAD,CAAV;AACH,KAvBD,EAwBCY,IAxBD,CAwBM,MAAM;AACRN,MAAAA,KAAK,CAAChB,QAAQ,GAAGC,GAAX,GAAiB,WAAlB,EAA+B;AAChCgB,QAAAA,MAAM,EAAE,MADwB;AAEhCC,QAAAA,OAAO,EAAE;AACL,2BAAkB,UAASL,OAAQ;AAD9B;AAFuB,OAA/B,CAAL,CAMCS,IAND,CAMMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EANb,EAOCF,IAPD,CAOMG,IAAI,IAAI;AACVI,QAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACd,MAAjB;AACH,OATD;AAUH,KAnCD,EAoCCoB,KApCD,CAoCOC,GAAG,IAAIH,OAAO,CAACC,GAAR,CAAYE,GAAZ,CApCd;AAqCH,GAtCD;;AAwCA,QAAMC,YAAY,GAAIC,CAAD,IAAO;AACxB,QAAGA,CAAC,CAACC,GAAF,IAAS,OAAZ,EAAqB;AACjBT,MAAAA,IAAI;AACP;AACJ,GAJD;;AAOA,MAAIU,OAAO,gBACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AACI,IAAA,KAAK,EAAE3B,OADX;AAEI,IAAA,QAAQ,EAAEyB,CAAC,IAAIxB,UAAU,CAACwB,CAAC,CAACG,MAAF,CAASC,KAAV,CAF7B;AAGI,IAAA,UAAU,EAAEL,YAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAMI;AAAQ,IAAA,OAAO,EAAEP,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eANJ,CADJ;;AAWA,MAAGnB,QAAQ,IAAI,IAAf,EAAqB;AACjB,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM6B,OADN,CADJ;AAKH,GAND,MAMO,IAAG7B,QAAQ,CAACoB,KAAT,KAAmB,qBAAtB,EAA6C;AAChD,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DADJ,EAEMS,OAFN,CADJ;AAMH;;AAED,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQ7B,QAAQ,CAACgC,GAAT,CAAaC,CAAC,iBAAI,oBAAC,gBAAD;AAAkB,IAAA,MAAM,EAAEA,CAAC,CAACC,MAA5B;AAAoC,IAAA,IAAI,EAAED,CAAC,CAACrB,IAA5C;AAAkD,IAAA,EAAE,EAAEqB,CAAC,CAAClC,EAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAlB,CAFR,EAIM8B,OAJN,CADJ;AAQH,CA7GD;;AA+GA,eAAelC,UAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Loading from '../Loading/Loading';\r\nimport CommentComponent from './Commenting';\r\n\r\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst url = \"https://us-central1-project-share-8df06.cloudfunctions.net/api/\";\r\n\r\nconst Commenting = (props) => {\r\n    const [postData, setPost] = useState({\r\n        id: props.id,\r\n    })\r\n    const [comments, setComments] = useState(null);\r\n    const [comment, setComment] = useState('');\r\n    const [handle, setHandle] = useState('');\r\n\r\n    const idToken = sessionStorage.getItem('token');\r\n\r\n    useEffect(() => {\r\n        fetch(proxyUrl + url + 'getComment', {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"User-Agent\": \"PostmanRuntime/7.26.5\",\r\n                \"Accept\": \"*/*\",\r\n                \"Accept-Encoding\": \"gzip, deflate, br\",\r\n                \"Connection\": \"keep-alive\"\r\n            },\r\n            body: JSON.stringify(postData)\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setComments(data);\r\n        })\r\n    }, [])\r\n\r\n    const post = () => {\r\n        fetch(proxyUrl + url + '/createComment', {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"User-Agent\": \"PostmanRuntime/7.26.5\",\r\n                \"Accept\": \"*/*\",\r\n                \"Accept-Encoding\": \"gzip, deflate, br\",\r\n                \"Connection\": \"keep-alive\",\r\n                \"Authorization\": `Bearer ${idToken}`\r\n            },\r\n            body: JSON.stringify({\r\n                id: props.id,\r\n                body: comment\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if(data.error === \"Unauthorized\") {\r\n                alert(\"You must be logged in to submit commit\");\r\n            }\r\n        })\r\n        .then(() => {\r\n            setComment('');\r\n        })\r\n        .then(() => {\r\n            fetch(proxyUrl + url + 'getHandle', {\r\n                method: 'POST',\r\n                headers: {\r\n                    \"Authorization\": `Bearer ${idToken}`\r\n                }\r\n            })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data.handle);\r\n            })\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        if(e.key == \"Enter\") {\r\n            post();\r\n        }\r\n    }\r\n    \r\n\r\n    let posting = (\r\n        <div>\r\n            <input \r\n                value={comment}\r\n                onChange={e => setComment(e.target.value)}\r\n                onKeyPress={handleChange}\r\n            />\r\n            <button onClick={post}>Comment</button>\r\n        </div>\r\n    )\r\n\r\n    if(comments == null) {\r\n        return (\r\n            <div>\r\n                { posting }\r\n            </div>\r\n        )\r\n    } else if(comments.error === \"Could not find post\") {\r\n        return (\r\n            <div>\r\n                <h1>Could not find any comments, Be the first to comment!</h1>\r\n                { posting }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                comments.map(c => <CommentComponent author={c.author} body={c.body} id={c.id} />)\r\n            }\r\n            { posting }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Commenting;"]},"metadata":{},"sourceType":"module"}