{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sopan\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\Project-Share\\\\project-share\\\\src\\\\Components\\\\Posts\\\\Comments.js\";\nimport React, { useEffect, useState } from 'react';\nimport CommentComponent from './Commenting';\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\nconst url = \"https://us-central1-project-share-8df06.cloudfunctions.net/api/\";\nconst Commenting = React.memo(props => {\n  const [postData, setPost] = useState({\n    id: props.id\n  });\n  const [comments, setComments] = useState(null);\n  const [comment, setComment] = useState('');\n  const [list, setList] = useState([]);\n  const [display, setDisplay] = useState( /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, list ? list.map(c => /*#__PURE__*/React.createElement(CommentComponent, {\n    author: c.author,\n    body: c.body,\n    id: c.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 38\n    }\n  })) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 104\n    }\n  }, \"Loading...\")));\n  const idToken = sessionStorage.getItem('token');\n\n  const loadAll = () => {\n    setDisplay( /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    }, comments ? comments.map(c => /*#__PURE__*/React.createElement(CommentComponent, {\n      author: c.author,\n      body: c.body,\n      id: c.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 50\n      }\n    })) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 116\n      }\n    }, \"Loading...\")));\n  };\n\n  useEffect(() => {\n    fetch(proxyUrl + url + 'getComment', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"PostmanRuntime/7.26.5\",\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Connection\": \"keep-alive\"\n      },\n      body: JSON.stringify(postData)\n    }).then(res => res.json()).then(data => {\n      setComments(data);\n\n      if (data.length > 3) {\n        setList(data.splice(0, 3));\n      } else {\n        setList(data);\n      }\n    });\n  }, []);\n\n  const post = () => {\n    if (idToken == null | undefined) {\n      alert('Not Logged In');\n    }\n\n    fetch(proxyUrl + url + '/createComment', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"PostmanRuntime/7.26.5\",\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Connection\": \"keep-alive\",\n        \"Authorization\": `Bearer ${idToken}`\n      },\n      body: JSON.stringify({\n        id: props.id,\n        body: comment\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.error === \"Unauthorized\") {\n        alert(\"You must be logged in to submit commit\");\n      }\n    }).then(() => {\n      setComment('');\n      window.location.reload(false);\n    }).catch(err => console.log(err));\n  };\n\n  const handleChange = e => {\n    if (e.key == \"Enter\") {\n      post();\n    }\n  };\n\n  let posting = /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: comment,\n    onChange: e => setComment(e.target.value),\n    onKeyPress: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, \"Comment\"));\n\n  if (comments == null) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, posting);\n  } else if (comments.error === \"Could not find post\") {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }, \"Could not find any comments, Be the first to comment!\"), posting);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, display, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: loadAll,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, \"Load All\"), posting);\n});\nexport default Commenting;","map":{"version":3,"sources":["C:/Users/sopan/OneDrive/Documents/Personal Projects/Project-Share/project-share/src/Components/Posts/Comments.js"],"names":["React","useEffect","useState","CommentComponent","proxyUrl","url","Commenting","memo","props","postData","setPost","id","comments","setComments","comment","setComment","list","setList","display","setDisplay","map","c","author","body","idToken","sessionStorage","getItem","loadAll","fetch","method","headers","JSON","stringify","then","res","json","data","length","splice","post","undefined","alert","error","window","location","reload","catch","err","console","log","handleChange","e","key","posting","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport CommentComponent from './Commenting';\r\n\r\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst url = \"https://us-central1-project-share-8df06.cloudfunctions.net/api/\";\r\n\r\nconst Commenting = React.memo((props) => {\r\n    const [postData, setPost] = useState({\r\n        id: props.id,\r\n    })\r\n    const [comments, setComments] = useState(null);\r\n    const [comment, setComment] = useState('');\r\n    const [list, setList] = useState([]);\r\n    const [display, setDisplay] = useState((\r\n        <div>\r\n            {\r\n                list ? list.map(c => <CommentComponent author={c.author} body={c.body} id={c.id} />) : <p>Loading...</p>\r\n            }\r\n        </div>\r\n    ))\r\n\r\n    const idToken = sessionStorage.getItem('token');\r\n\r\n    const loadAll = () => {\r\n        setDisplay((\r\n            <div>\r\n                {\r\n                    comments ? comments.map(c => <CommentComponent author={c.author} body={c.body} id={c.id} />) : <p>Loading...</p>\r\n                }\r\n            </div>\r\n        ));\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetch(proxyUrl + url + 'getComment', {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"User-Agent\": \"PostmanRuntime/7.26.5\",\r\n                \"Accept\": \"*/*\",\r\n                \"Accept-Encoding\": \"gzip, deflate, br\",\r\n                \"Connection\": \"keep-alive\"\r\n            },\r\n            body: JSON.stringify(postData)\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setComments(data);\r\n            if(data.length > 3) {\r\n                setList(data.splice(0, 3));\r\n            } else {\r\n                setList(data);\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    const post = () => {\r\n        if(idToken == null | undefined) {\r\n            alert('Not Logged In')\r\n        }\r\n\r\n        fetch(proxyUrl + url + '/createComment', {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"User-Agent\": \"PostmanRuntime/7.26.5\",\r\n                \"Accept\": \"*/*\",\r\n                \"Accept-Encoding\": \"gzip, deflate, br\",\r\n                \"Connection\": \"keep-alive\",\r\n                \"Authorization\": `Bearer ${idToken}`\r\n            },\r\n            body: JSON.stringify({\r\n                id: props.id,\r\n                body: comment\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if(data.error === \"Unauthorized\") {\r\n                alert(\"You must be logged in to submit commit\");\r\n            }\r\n        })\r\n        .then(() => {\r\n            setComment('');\r\n            window.location.reload(false);\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        if(e.key == \"Enter\") {\r\n            post();\r\n        }\r\n    }\r\n\r\n    let posting = (\r\n        <div>\r\n            <input \r\n                value={comment}\r\n                onChange={e => setComment(e.target.value)}\r\n                onKeyPress={handleChange}\r\n            />\r\n            <button onClick={post}>Comment</button>\r\n        </div>\r\n    )\r\n\r\n    if(comments == null) {\r\n        return (\r\n            <div>\r\n                { posting }\r\n            </div>\r\n        )\r\n    } else if(comments.error === \"Could not find post\") {\r\n        return (\r\n            <div>\r\n                <h1>Could not find any comments, Be the first to comment!</h1>\r\n                { posting }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { display }\r\n            <button onClick={loadAll}>Load All</button>\r\n            { posting }\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default Commenting;"]},"metadata":{},"sourceType":"module"}