{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sopan\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\Project-Share\\\\project-share\\\\src\\\\Components\\\\Posts\\\\Posts.js\";\nimport React, { useState } from 'react';\nimport Commenting from './Comments';\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\nconst url = \"https://us-central1-project-share-8df06.cloudfunctions.net/api/\";\n\nconst Posts = props => {\n  const [showComment, setComments] = useState(false);\n  const [liked, setLiked] = useState(null);\n  let comments = null;\n  let likes = parseInt(props.likes);\n  let likesButton = /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setLiked(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, \"Like\");\n  const item = sessionStorage.getItem(props.id);\n  console.log(typeof item);\n\n  if (showComment) {\n    comments = /*#__PURE__*/React.createElement(Commenting, {\n      id: props.id,\n      token: props.token,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }\n    });\n  }\n\n  if (liked == null) {\n    likesButton = /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => setLiked(true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }\n    }, \"Like\");\n  }\n\n  const like = () => {\n    if (item == 'true') {\n      alert(\"You have already liked this post\");\n    } else {\n      const post = {\n        body: props.children,\n        author: props.author,\n        title: props.title,\n        category: props.category,\n        likes,\n        id: props.id\n      };\n      likes = post.likes + 1;\n      fetch(proxyUrl + url + 'likePost', {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"User-Agent\": \"PostmanRuntime/7.26.5\",\n          \"Accept\": \"*/*\",\n          \"Accept-Encoding\": \"gzip, deflate, br\",\n          \"Connection\": \"keep-alive\"\n        },\n        body: JSON.stringify(post)\n      }).then(() => {\n        sessionStorage.setItem(props.id, 'true');\n      });\n    }\n\n    ;\n  };\n\n  if (liked == true) {\n    like();\n    likesButton = /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => setLiked(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, \"Unlike\");\n  }\n\n  const unlike = () => {\n    const post = {\n      body: props.children,\n      author: props.author,\n      title: props.title,\n      category: props.category,\n      likes: parseInt(props.likes + 1) - 1,\n      id: props.id\n    };\n    likes = props.likes + 1 - 1;\n    fetch(proxyUrl + url + 'unlikePost', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"PostmanRuntime/7.26.5\",\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Connection\": \"keep-alive\"\n      },\n      body: JSON.stringify(post)\n    }).then(() => {\n      sessionStorage.removeItem(props.id);\n    });\n  };\n\n  if (liked == false) {\n    unlike();\n    likesButton = /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => setLiked(true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, \"Like\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    key: props.id,\n    className: \"post-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"post-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, props.title), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"post-category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, \"Category: \", props.category), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"post-author\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, \"Author: \", /*#__PURE__*/React.createElement(\"a\", {\n    href: `http://localhost:3000/user/${props.author}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 48\n    }\n  }, props.author)), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"post-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, props.children), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"post-likes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, likesButton, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 52\n    }\n  }, likes)), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setComments(!showComment),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, \"Comments\"), comments);\n};\n\nexport default Posts;","map":{"version":3,"sources":["C:/Users/sopan/OneDrive/Documents/Personal Projects/Project-Share/project-share/src/Components/Posts/Posts.js"],"names":["React","useState","Commenting","proxyUrl","url","Posts","props","showComment","setComments","liked","setLiked","comments","likes","parseInt","likesButton","item","sessionStorage","getItem","id","console","log","token","like","alert","post","body","children","author","title","category","fetch","method","headers","JSON","stringify","then","setItem","unlike","removeItem"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport Commenting from './Comments';\r\n\r\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst url = \"https://us-central1-project-share-8df06.cloudfunctions.net/api/\";\r\nconst Posts = (props) => {\r\n    const [showComment, setComments] = useState(false);\r\n    const [liked, setLiked] = useState(null);\r\n\r\n    let comments = null;\r\n\r\n    let likes = parseInt(props.likes)\r\n    let likesButton = (\r\n        <button onClick={() => setLiked(true)}>Like</button>\r\n    );\r\n\r\n    const item = sessionStorage.getItem(props.id);\r\n    console.log(typeof(item));\r\n\r\n    if (showComment) {\r\n        comments = (\r\n            <Commenting id={props.id} token={props.token} />\r\n        )\r\n    }\r\n\r\n    if (liked == null) {\r\n        likesButton = (\r\n            <button onClick={() => setLiked(true)}>Like</button>\r\n        );\r\n    }\r\n\r\n    const like = () => {\r\n        if(item == 'true') {\r\n            alert(\"You have already liked this post\");\r\n        } else {\r\n            const post = {\r\n                body: props.children,\r\n                author: props.author,\r\n                title: props.title,\r\n                category: props.category,\r\n                likes,\r\n                id: props.id\r\n            };\r\n\r\n            likes = post.likes + 1;\r\n\r\n            fetch(proxyUrl + url + 'likePost', {\r\n                method: 'POST',\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"User-Agent\": \"PostmanRuntime/7.26.5\",\r\n                    \"Accept\": \"*/*\",\r\n                    \"Accept-Encoding\": \"gzip, deflate, br\",\r\n                    \"Connection\": \"keep-alive\"\r\n                },\r\n                body: JSON.stringify(post)\r\n            })\r\n            .then(() => {\r\n                sessionStorage.setItem(props.id, 'true');\r\n            })\r\n        };\r\n    }\r\n\r\n    if (liked == true) {\r\n        like();\r\n        likesButton = (\r\n            <button onClick={() => setLiked(false)}>Unlike</button>\r\n        )\r\n    }\r\n\r\n    const unlike = () => {\r\n        const post = {\r\n            body: props.children,\r\n            author: props.author,\r\n            title: props.title,\r\n            category: props.category,\r\n            likes: parseInt(props.likes + 1) - 1,\r\n            id: props.id\r\n        };\r\n\r\n        likes = props.likes + 1 - 1;\r\n\r\n        fetch(proxyUrl + url + 'unlikePost', {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"User-Agent\": \"PostmanRuntime/7.26.5\",\r\n                \"Accept\": \"*/*\",\r\n                \"Accept-Encoding\": \"gzip, deflate, br\",\r\n                \"Connection\": \"keep-alive\"\r\n            },\r\n            body: JSON.stringify(post)\r\n        })\r\n        .then(() => {\r\n            sessionStorage.removeItem(props.id);\r\n        })\r\n    }\r\n\r\n    if (liked == false) {\r\n        unlike();\r\n        likesButton = (\r\n            <button onClick={() => setLiked(true)}>Like</button>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div key={props.id} className=\"post-content\">\r\n            <p className=\"post-title\">{props.title}</p>\r\n            <p className=\"post-category\">Category: {props.category}</p>\r\n            <p className=\"post-author\">Author: <a href={`http://localhost:3000/user/${props.author}`}>{props.author}</a></p>\r\n            <p className=\"post-body\">{props.children}</p>\r\n            <p className=\"post-likes\">{likesButton}<span>{likes}</span></p>\r\n            {/* Add Commenting */}\r\n            <button onClick={() => setComments(!showComment)}>Comments</button>\r\n            { comments}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Posts;"]},"metadata":{},"sourceType":"module"}