{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sopan\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\Project-Share\\\\web\\\\src\\\\Pages\\\\New Post\\\\NewPost.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Loading from \"../../Components/Loading/Loading\";\nimport { Fetch } from \"../../Tools\";\n\nconst NewPost = () => {\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [categories, setCategories] = useState(null);\n  const history = useHistory();\n  useEffect(() => {\n    const scoped = async () => {\n      const res = await Fetch(`\n                {\n                    getCategories {\n                        title\n                    }\n                }\n            `);\n      setCategories(res.getCategories);\n    };\n\n    scoped();\n  }, []);\n  console.log(categories);\n\n  const post = () => {\n    const scoped = async () => {\n      const token = sessionStorage.getItem(\"token\");\n      const res = await Fetch(`\n                mutation {\n                    newPost(token: \"${token}\", title: \"${title}\", body: \"${body}\", category: \"${category}\") {\n                        id\n                    }\n                } \n            `);\n\n      if (res.newPost) {\n        history.push(\"/\");\n      } else {\n        alert(\"Error while posting\");\n      }\n    };\n\n    console.log(title, body, category);\n\n    if (title && body && category) {\n      if (category.includes(\"@\") || category.includes(\"/\") || category.includes(\"?\") || category.includes(\"#\") || category.includes(\"$\")) {\n        alert(\"Wierd Characters in Category\");\n      } else {\n        scoped();\n      }\n    } else {\n      alert(\"Some fields are empty\");\n    }\n  };\n\n  const handleKey = e => {\n    if (e.key == \"Enter\") {\n      post();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: title,\n    onChange: e => setTitle(e.target.value),\n    placeholder: \"Title of Post\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"select\", {\n    onChange: e => setCategory(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), categories ? categories.map(c => /*#__PURE__*/React.createElement(\"option\", {\n    value: c.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 33\n    }\n  }, c.title)) : /*#__PURE__*/React.createElement(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"textarea\", {\n    value: body,\n    onChange: e => setBody(e.target.value),\n    placeholder: \"Post Body\",\n    onKeyDown: handleKey,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, \"Post\"), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"/about\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, \"Add Suggestions\"));\n};\n\nexport default NewPost;","map":{"version":3,"sources":["C:/Users/sopan/OneDrive/Documents/Personal Projects/Project-Share/web/src/Pages/New Post/NewPost.js"],"names":["React","useEffect","useState","useHistory","Loading","Fetch","NewPost","title","setTitle","body","setBody","category","setCategory","categories","setCategories","history","scoped","res","getCategories","console","log","post","token","sessionStorage","getItem","newPost","push","alert","includes","handleKey","e","key","target","value","map","c"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Loading from \"../../Components/Loading/Loading\";\r\nimport { Fetch } from \"../../Tools\";\r\n\r\nconst NewPost = () => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [body, setBody] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [categories, setCategories] = useState(null);\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const scoped = async () => {\r\n      const res = await Fetch(`\r\n                {\r\n                    getCategories {\r\n                        title\r\n                    }\r\n                }\r\n            `);\r\n      setCategories(res.getCategories);\r\n    };\r\n    scoped();\r\n  }, []);\r\n\r\n  console.log(categories);\r\n\r\n  const post = () => {\r\n    const scoped = async () => {\r\n      const token = sessionStorage.getItem(\"token\");\r\n      const res = await Fetch(`\r\n                mutation {\r\n                    newPost(token: \"${token}\", title: \"${title}\", body: \"${body}\", category: \"${category}\") {\r\n                        id\r\n                    }\r\n                } \r\n            `);\r\n      if (res.newPost) {\r\n        history.push(\"/\");\r\n      } else {\r\n        alert(\"Error while posting\");\r\n      }\r\n    };\r\n    console.log(title, body, category);\r\n\r\n    if (title && body && category) {\r\n      if (\r\n        category.includes(\"@\") ||\r\n        category.includes(\"/\") ||\r\n        category.includes(\"?\") ||\r\n        category.includes(\"#\") ||\r\n        category.includes(\"$\")\r\n      ) {\r\n        alert(\"Wierd Characters in Category\");\r\n      } else {\r\n        scoped();\r\n      }\r\n    } else {\r\n      alert(\"Some fields are empty\");\r\n    }\r\n  };\r\n\r\n  const handleKey = (e) => {\r\n    if (e.key == \"Enter\") {\r\n      post();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        value={title}\r\n        onChange={(e) => setTitle(e.target.value)}\r\n        placeholder=\"Title of Post\"\r\n      />\r\n      <select onChange={(e) => setCategory(e.target.value)}>\r\n        <option value=\"\"></option>\r\n        {categories ? (\r\n          categories.map((c) => <option value={c.title}>{c.title}</option>)\r\n        ) : (\r\n          <Loading />\r\n        )}\r\n      </select>\r\n      <textarea\r\n        value={body}\r\n        onChange={(e) => setBody(e.target.value)}\r\n        placeholder=\"Post Body\"\r\n        onKeyDown={handleKey}\r\n      ></textarea>\r\n      <button onClick={post}>Post</button>\r\n      <a href=\"/about\">Add Suggestions</a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPost;\r\n"]},"metadata":{},"sourceType":"module"}