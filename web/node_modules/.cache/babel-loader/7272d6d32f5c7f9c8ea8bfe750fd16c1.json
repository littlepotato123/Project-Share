{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sopan\\\\OneDrive\\\\Documents\\\\Personal Projects\\\\Project-Share\\\\project-share\\\\src\\\\Components\\\\Posts\\\\Comments.js\";\nimport React, { useEffect, useState } from 'react';\nimport CommentComponent from './Commenting';\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\nconst url = \"https://us-central1-project-share-8df06.cloudfunctions.net/api/\";\nconst Commenting = React.memo(props => {\n  const [postData, setPost] = useState({\n    id: props.id\n  });\n  const [comments, setComments] = useState(null);\n  const [comment, setComment] = useState('');\n  const [display, setDisplay] = useState(null);\n  const [but, setBut] = useState(null);\n  const [commentD, setCiplay] = useState(null);\n\n  const changeBut = () => {\n    setBut(null);\n  };\n\n  const idToken = sessionStorage.getItem('token');\n\n  if (idToken == null) {// Hello\n  }\n\n  let loadAll = () => {\n    changeBut();\n  };\n\n  useEffect(() => {\n    fetch(proxyUrl + url + 'getComment', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"User-Agent\": \"PostmanRuntime/7.26.5\",\n        \"Accept\": \"*/*\",\n        \"Accept-Encoding\": \"gzip, deflate, br\",\n        \"Connection\": \"keep-alive\"\n      },\n      body: JSON.stringify(postData)\n    }).then(res => res.json()).then(data => {\n      setComments(data);\n      const l = data.slice(0, 3);\n      setDisplay( /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }\n      }, l ? l.map(c => /*#__PURE__*/React.createElement(CommentComponent, {\n        author: c.author,\n        body: c.body,\n        id: c.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 40\n        }\n      })) : /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 106\n        }\n      }, \"Loading...\")));\n\n      loadAll = () => {\n        console.log(display);\n        setDisplay( /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 21\n          }\n        }, data ? data.map(c => /*#__PURE__*/React.createElement(CommentComponent, {\n          author: c.author,\n          body: c.body,\n          id: c.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 50\n          }\n        })) : /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 116\n          }\n        }, \"Loading...\")));\n        changeBut();\n      };\n\n      setBut( /*#__PURE__*/React.createElement(\"button\", {\n        onClick: loadAll,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }\n      }, \"Load All\"));\n    });\n  }, []);\n\n  const post = () => {\n    if (idToken !== null | undefined) {\n      alert('Not Logged In');\n    } else {\n      fetch(proxyUrl + url + '/createComment', {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"User-Agent\": \"PostmanRuntime/7.26.5\",\n          \"Accept\": \"*/*\",\n          \"Accept-Encoding\": \"gzip, deflate, br\",\n          \"Connection\": \"keep-alive\",\n          \"Authorization\": `Bearer ${idToken}`\n        },\n        body: JSON.stringify({\n          id: props.id,\n          body: comment\n        })\n      }).then(res => res.json()).then(data => {\n        setComment('');\n        window.location.reload(false);\n      });\n    }\n  };\n\n  const handleChange = e => {\n    if (e.key == \"Enter\") {\n      post();\n    }\n  };\n\n  let input = /*#__PURE__*/React.createElement(\"input\", {\n    value: comment,\n    onChange: e => setComment(e.target.value),\n    onKeyPress: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  });\n  let posting = /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, input, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, \"Comment\"));\n\n  if (comments == null) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, posting);\n  } else if (comments.error === \"Could not find post\") {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }, \"Could not find any comments, Be the first to comment!\"), posting);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, display, but, posting);\n});\nexport default Commenting;","map":{"version":3,"sources":["C:/Users/sopan/OneDrive/Documents/Personal Projects/Project-Share/project-share/src/Components/Posts/Comments.js"],"names":["React","useEffect","useState","CommentComponent","proxyUrl","url","Commenting","memo","props","postData","setPost","id","comments","setComments","comment","setComment","display","setDisplay","but","setBut","commentD","setCiplay","changeBut","idToken","sessionStorage","getItem","loadAll","fetch","method","headers","body","JSON","stringify","then","res","json","data","l","slice","map","c","author","console","log","post","undefined","alert","window","location","reload","handleChange","e","key","input","target","value","posting","error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,gBAAP,MAA6B,cAA7B;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;AACA,MAAMC,GAAG,GAAG,iEAAZ;AAEA,MAAMC,UAAU,GAAGN,KAAK,CAACO,IAAN,CAAYC,KAAD,IAAW;AACrC,QAAM,CAACC,QAAD,EAAWC,OAAX,IAAsBR,QAAQ,CAAC;AACjCS,IAAAA,EAAE,EAAEH,KAAK,CAACG;AADuB,GAAD,CAApC;AAGA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACgB,GAAD,EAAMC,MAAN,IAAgBjB,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAM,CAACkB,QAAD,EAAWC,SAAX,IAAwBnB,QAAQ,CAAC,IAAD,CAAtC;;AAEA,QAAMoB,SAAS,GAAG,MAAM;AACpBH,IAAAA,MAAM,CAAC,IAAD,CAAN;AACH,GAFD;;AAIA,QAAMI,OAAO,GAAGC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAhB;;AAEA,MAAGF,OAAO,IAAI,IAAd,EAAoB,CAChB;AACH;;AAED,MAAIG,OAAO,GAAG,MAAM;AAChBJ,IAAAA,SAAS;AACZ,GAFD;;AAIArB,EAAAA,SAAS,CAAC,MAAM;AACZ0B,IAAAA,KAAK,CAACvB,QAAQ,GAAGC,GAAX,GAAiB,YAAlB,EAAgC;AACjCuB,MAAAA,MAAM,EAAE,MADyB;AAEjCC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,sBAAc,uBAFT;AAGL,kBAAU,KAHL;AAIL,2BAAmB,mBAJd;AAKL,sBAAc;AALT,OAFwB;AASjCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAevB,QAAf;AAT2B,KAAhC,CAAL,CAWCwB,IAXD,CAWMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAXb,EAYCF,IAZD,CAYMG,IAAI,IAAI;AACVvB,MAAAA,WAAW,CAACuB,IAAD,CAAX;AACA,YAAMC,CAAC,GAAGD,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,CAAd,CAAV;AACArB,MAAAA,UAAU,eACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEQoB,CAAC,GAAGA,CAAC,CAACE,GAAF,CAAMC,CAAC,iBAAI,oBAAC,gBAAD;AAAkB,QAAA,MAAM,EAAEA,CAAC,CAACC,MAA5B;AAAoC,QAAA,IAAI,EAAED,CAAC,CAACV,IAA5C;AAAkD,QAAA,EAAE,EAAEU,CAAC,CAAC7B,EAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAX,CAAH,gBAAgF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFzF,CADM,CAAV;;AAOAe,MAAAA,OAAO,GAAG,MAAM;AACZgB,QAAAA,OAAO,CAACC,GAAR,CAAY3B,OAAZ;AACAC,QAAAA,UAAU,eACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEQmB,IAAI,GAAGA,IAAI,CAACG,GAAL,CAASC,CAAC,iBAAI,oBAAC,gBAAD;AAAkB,UAAA,MAAM,EAAEA,CAAC,CAACC,MAA5B;AAAoC,UAAA,IAAI,EAAED,CAAC,CAACV,IAA5C;AAAkD,UAAA,EAAE,EAAEU,CAAC,CAAC7B,EAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAd,CAAH,gBAAmF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAF/F,CADM,CAAV;AAOAW,QAAAA,SAAS;AACZ,OAVD;;AAWAH,MAAAA,MAAM,eACF;AAAQ,QAAA,OAAO,EAAEO,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADE,CAAN;AAGH,KApCD;AAqCH,GAtCQ,EAsCN,EAtCM,CAAT;;AAyCA,QAAMkB,IAAI,GAAG,MAAM;AACf,QAAGrB,OAAO,KAAK,IAAZ,GAAmBsB,SAAtB,EAAiC;AAC7BC,MAAAA,KAAK,CAAC,eAAD,CAAL;AACH,KAFD,MAEO;AACHnB,MAAAA,KAAK,CAACvB,QAAQ,GAAGC,GAAX,GAAiB,gBAAlB,EAAoC;AACrCuB,QAAAA,MAAM,EAAE,MAD6B;AAErCC,QAAAA,OAAO,EAAE;AACL,0BAAgB,kBADX;AAEL,wBAAc,uBAFT;AAGL,oBAAU,KAHL;AAIL,6BAAmB,mBAJd;AAKL,wBAAc,YALT;AAML,2BAAkB,UAASN,OAAQ;AAN9B,SAF4B;AAUrCO,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBrB,UAAAA,EAAE,EAAEH,KAAK,CAACG,EADO;AAEjBmB,UAAAA,IAAI,EAAEhB;AAFW,SAAf;AAV+B,OAApC,CAAL,CAeCmB,IAfD,CAeMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAfb,EAgBCF,IAhBD,CAgBMG,IAAI,IAAI;AACVrB,QAAAA,UAAU,CAAC,EAAD,CAAV;AACAgC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,KAAvB;AACH,OAnBD;AAoBH;AACJ,GAzBD;;AA2BA,QAAMC,YAAY,GAAIC,CAAD,IAAO;AACxB,QAAGA,CAAC,CAACC,GAAF,IAAS,OAAZ,EAAqB;AACjBR,MAAAA,IAAI;AACP;AACJ,GAJD;;AAMA,MAAIS,KAAK,gBACL;AACI,IAAA,KAAK,EAAEvC,OADX;AAEI,IAAA,QAAQ,EAAEqC,CAAC,IAAIpC,UAAU,CAACoC,CAAC,CAACG,MAAF,CAASC,KAAV,CAF7B;AAGI,IAAA,UAAU,EAAEL,YAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAQA,MAAIM,OAAO,gBACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMH,KADN,eAEI;AAAQ,IAAA,OAAO,EAAET,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFJ,CADJ;;AAOA,MAAGhC,QAAQ,IAAI,IAAf,EAAqB;AACjB,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACM4C,OADN,CADJ;AAKH,GAND,MAMO,IAAG5C,QAAQ,CAAC6C,KAAT,KAAmB,qBAAtB,EAA6C;AAChD,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DADJ,EAEMD,OAFN,CADJ;AAMH;;AAED,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMxC,OADN,EAEME,GAFN,EAGMsC,OAHN,CADJ;AAOH,CAvIkB,CAAnB;AAyIA,eAAelD,UAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport CommentComponent from './Commenting';\r\n\r\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst url = \"https://us-central1-project-share-8df06.cloudfunctions.net/api/\";\r\n\r\nconst Commenting = React.memo((props) => {\r\n    const [postData, setPost] = useState({\r\n        id: props.id,\r\n    })\r\n    const [comments, setComments] = useState(null);\r\n    const [comment, setComment] = useState('');\r\n    const [display, setDisplay] = useState(null);\r\n    const [but, setBut] = useState(null);\r\n    const [commentD, setCiplay] = useState(null);\r\n\r\n    const changeBut = () => {\r\n        setBut(null);\r\n    }\r\n\r\n    const idToken = sessionStorage.getItem('token');\r\n\r\n    if(idToken == null) {\r\n        // Hello\r\n    }\r\n    \r\n    let loadAll = () => {\r\n        changeBut();\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetch(proxyUrl + url + 'getComment', {\r\n            method: 'POST',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"User-Agent\": \"PostmanRuntime/7.26.5\",\r\n                \"Accept\": \"*/*\",\r\n                \"Accept-Encoding\": \"gzip, deflate, br\",\r\n                \"Connection\": \"keep-alive\"\r\n            },\r\n            body: JSON.stringify(postData)\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setComments(data);\r\n            const l = data.slice(0, 3);\r\n            setDisplay((\r\n                <div>\r\n                    {\r\n                        l ? l.map(c => <CommentComponent author={c.author} body={c.body} id={c.id} />) : <p>Loading...</p>\r\n                    }\r\n                </div>\r\n            ))\r\n            loadAll = () => {\r\n                console.log(display);\r\n                setDisplay((\r\n                    <div>\r\n                        {\r\n                            data ? data.map(c => <CommentComponent author={c.author} body={c.body} id={c.id} />) : <p>Loading...</p>\r\n                        }\r\n                    </div>\r\n                ))\r\n                changeBut();\r\n            }\r\n            setBut((\r\n                <button onClick={loadAll}>Load All</button>\r\n            ))\r\n        })\r\n    }, [])\r\n\r\n\r\n    const post = () => {\r\n        if(idToken !== null | undefined) {\r\n            alert('Not Logged In')\r\n        } else {\r\n            fetch(proxyUrl + url + '/createComment', {\r\n                method: 'POST',\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"User-Agent\": \"PostmanRuntime/7.26.5\",\r\n                    \"Accept\": \"*/*\",\r\n                    \"Accept-Encoding\": \"gzip, deflate, br\",\r\n                    \"Connection\": \"keep-alive\",\r\n                    \"Authorization\": `Bearer ${idToken}`\r\n                },\r\n                body: JSON.stringify({\r\n                    id: props.id,\r\n                    body: comment\r\n                })\r\n            })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                setComment('');\r\n                window.location.reload(false);\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        if(e.key == \"Enter\") {\r\n            post();\r\n        }\r\n    }\r\n\r\n    let input = (\r\n        <input \r\n            value={comment}\r\n            onChange={e => setComment(e.target.value)}\r\n            onKeyPress={handleChange}\r\n        />\r\n    );\r\n\r\n    let posting = (\r\n        <div>\r\n            { input }\r\n            <button onClick={post}>Comment</button>\r\n        </div>\r\n    )\r\n\r\n    if(comments == null) {\r\n        return (\r\n            <div>\r\n                { posting }\r\n            </div>\r\n        )\r\n    } else if(comments.error === \"Could not find post\") {\r\n        return (\r\n            <div>\r\n                <h1>Could not find any comments, Be the first to comment!</h1>\r\n                { posting }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { display }\r\n            { but }\r\n            { posting }\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default Commenting;"]},"metadata":{},"sourceType":"module"}